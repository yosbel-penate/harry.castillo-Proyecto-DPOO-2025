@startuml
  Game "1" *-- "1" Board : contains
  Game "1" -- "1..." Character : manages
  Game "1" *-- "1" TurnManager : uses
  Character <|-- PlayersCharacter
  Character <|-- EnemiesCharacter
  Character "1" -- "0..." Consumable : has
  Character"1" *-- "1"Position:on
  TurnManager"1" --* "1"PlayersCharacter: has
  TurnManager"1" --* "1" EnemiesCharacter: has
  TurnManager"1" --* "1" SpecialEnemiesCharacter: has



 class Game {
     -board:Board
     -turnManager:TurnManager
     -character: List<Character>
     +Game()
     +startGame() : void
     +runGameLoop() : void
     +update() : void
     +getBoard() : Board
     +getCharacters() : List<Character>
 }

 class Board {
     -board:Board
     -tileSize:int
     -rows:int
     -cols:int
     -titles: HexTile[][]
     -terrain:TerrainType
     -occupant:Character
     +Board(rows: int, cols: int)
     +initializeTiles() : void
     +boardPane(board: Board)
     +render():void
     +getRow() : int
     +getCol() : int
     +getTerrain() : TerrainType
     +isOccupied() : boolean
     +getOccupant() : Character
     +setOccupant(occupant: Character) : void
 }

 class Effect{
    -valueEffect: int
    +Effect()
    +Effect(valueEffect:int)
    +getValueEffect():int
    +setValueEffect(valueEffect:int):void
    +applyEffect(character:Character):void
 }

 TerrainType<|-down- Forest
  TerrainType<|-down- River
  TerrainType<|-down- Mountains
  TerrainType<|-down- Ruins
  TerrainType"1" o-- "1"Effect:has
  TerrainType"1" --* "1"Position:has

  class TerrainType{
      -position:Position
      -effect: Effect
      +terrainType()
      +terrainType(position:Position, effect:Effect)
      +applyEffectTerrainType(character:Character, effect:Effect):void
  }
  class Forest{
  }
  class River{
  }
  class Mountains{
  }
  class Ruins{
  }

  Board"1" -- "0..."Dangers:has
  Board"1" --"1..." TerrainType:has


  Dangers <|-- ether_storm
  Dangers <|-- shadow_pit

  class Dangers{
  -position:Position
  -range: Position
  -effect:Effect
  -duration: TurnManager
  -movement:int
  }
  class ether_storm{
  }
  class shadow_pit{
  }


  class Position {
      -int: row
      -int: col
      +Position()
      +Position(row: int, col: int)
      +getRow() : int
      +getCol() : int
      +distanceTo(other: Position) : int
  }

  class TurnManager {
      -turnOrder:List<Character>
      -currentTurnIndex:void
      +TurnManager()
      +TurnManager(turnOrder: List<Character>)
      +getCurrentCharacter() : Character
      +nextTurn() : void
      +resetTurn() : void
  }
  class PlayersCharacter {
     -personality:String
     -defense:int
     -role:String
     -type:String
     -inventory: List<Consumable>
     +PlayersCharacter()
     +PlayersCharacter(name: String, currentHealth: int, attack: int, defense: int, movement: int, position: Position, role: String)
     +MoveAction(character: PlayersCharacter, destination: Position): void
     +execute() : void

 }
 class Kael_Draven{

 + firmGuard(): void
 + dashMovement(): void
 }

 class Cintya_Eaglevision{
 + inmobilizeEnemies(): void
 }
 class Jax_Blacksword{
 + heavyBlow(): void
 + hardHits(): void
 }
 class Lina_Fireheart{
 + hellInEarth(): void
 }
 class Alessandra_The_Brilliant{
 + healingLight(): void
 }
 class Sirael_The_Serious_One{
 + incapacitatingEdge(): void
 }
 class Lyrasa_Velith{
 + accurateShot(): void
 }
 class Xaviru_Palast{
 + magicExtension(): void
 }
 class Heloro_Maeg{
 + polarAura(): void
 }
 class Lyffa_Shartis{
 + healingBreeze(): void
 + freezingBreeze(): void
 }
class Hobgrou{
 + sharpTip(): void
 }
 class Groshta{
 + greed():void
 + steelHand(): void
 }
 class Globius{
 + meltedInShadows(): void
 }
 class Hobag{
 + drainMagic(): void
 }
 class Higlob{
 + natureHelp(): void
 }
 class Drekker_The_Blade{
 + hellishScream(): void
 }
 class Grisha_The_Stalker{
 + aim(): void
 + bulletInForehead():void
 }
 class Zorak_The_Skinner{
 + wildAnger(): void
 }
 class Goldan_The_Vile{
 + noMagicAllowed(): void
 }
 class Gortona_Sewwounds{
 + vileCure(): void
 }
 class Azeli{
 + healingFlame(): void
 + bastardFlame(): void
 }
 class Shira_WhiteEdge{
 + camouflage(): void
 + hideAndSeek(): void
 }

 EnemiesCharacter <|-down- spectral_wolf
 EnemiesCharacter <|-down- stone_guardian
 EnemiesCharacter <|-down- void_howler

 class EnemiesCharacter {
     +EnemiesCharacter()
     +EnemiesCharacter(name: String, health: int, attack: int, defense: int, movement: int, position: Position, role: Role)
 }
 class spectral_wolf{
 }
 class stone_guardian{
 }

 class void_howler{
 }
@enduml
